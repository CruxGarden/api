{
	"info": {
		"_postman_id": "account-collection",
		"name": "Crux Garden API - Account",
		"description": "Complete API collection for Account management in CruxGarden",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set base URL if not already set",
					"if (!pm.variables.get('base_url')) {",
					"    pm.variables.set('base_url', 'http://localhost:3000');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "account_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "original_email",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Account Management",
			"item": [
				{
					"name": "Get Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save account data for other requests",
									"if (pm.response.code === 200) {",
									"    const account = pm.response.json();",
									"    pm.collectionVariables.set('account_id', account.id);",
									"    pm.collectionVariables.set('original_email', account.email);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/account",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"account"
							]
						},
						"description": "Retrieves the authenticated user's account information. Requires valid JWT token."
					},
					"response": []
				},
				{
					"name": "Update Account (Partial)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"updated-email@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/account",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"account"
							]
						},
						"description": "Partially updates the authenticated user's account. Only provided fields will be updated. Uses PATCH for partial updates."
					},
					"response": []
				},
				{
					"name": "Delete Account",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"confirmationText\": \"DELETE MY ACCOUNT\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/account",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"account"
							]
						},
						"description": "Permanently deletes the authenticated user's account. Requires exact confirmation text: 'DELETE MY ACCOUNT'"
					},
					"response": []
				}
			],
			"description": "Core account management endpoints"
		},
		{
			"name": "Test Scenarios",
			"item": [
				{
					"name": "Account Workflow Test",
					"item": [
						{
							"name": "1. Get Current Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Account retrieved successfully', function () {",
											"    pm.response.to.have.status(200);",
											"    const account = pm.response.json();",
											"    pm.expect(account).to.have.property('id');",
											"    pm.expect(account).to.have.property('email');",
											"    pm.expect(account).to.have.property('role');",
											"    ",
											"    // Save for next requests",
											"    pm.collectionVariables.set('test_account_id', account.id);",
											"    pm.collectionVariables.set('test_original_email', account.email);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"url": {
									"raw": "{{base_url}}/account",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Update Account Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Account updated successfully', function () {",
											"    pm.response.to.have.status(200);",
											"    const account = pm.response.json();",
											"    pm.expect(account.email).to.equal('test-updated@example.com');",
											"    pm.expect(account.id).to.equal(pm.collectionVariables.get('test_account_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"test-updated@example.com\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/account",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Revert Email Change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Email reverted successfully', function () {",
											"    pm.response.to.have.status(200);",
											"    const account = pm.response.json();",
											"    pm.expect(account.email).to.equal(pm.collectionVariables.get('test_original_email'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{test_original_email}}\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/account",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"account"
									]
								}
							},
							"response": []
						}
					],
					"description": "Complete workflow test for account operations"
				},
				{
					"name": "Error Scenarios",
					"item": [
						{
							"name": "Update with Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Returns 400 for invalid email', function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"invalid-email-format\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/account",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete with Wrong Confirmation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Returns 400 for wrong confirmation text', function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"confirmationText\": \"WRONG CONFIRMATION\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/account",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Access Without Authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Returns 401 for unauthenticated request', function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"url": {
									"raw": "{{base_url}}/account",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"account"
									]
								}
							},
							"response": []
						}
					],
					"description": "Test error handling scenarios"
				}
			],
			"description": "Comprehensive test scenarios for the Account API"
		},
		{
			"name": "Example Requests",
			"item": [
				{
					"name": "Update Email Only",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"newemail@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/account",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"account"
							]
						},
						"description": "Example of updating only the email field using PATCH"
					},
					"response": []
				},
				{
					"name": "Valid Delete Request",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"confirmationText\": \"DELETE MY ACCOUNT\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/account",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"account"
							]
						},
						"description": "Example of properly formatted delete request with exact confirmation text"
					},
					"response": []
				}
			],
			"description": "Example requests showing proper usage"
		}
	]
}